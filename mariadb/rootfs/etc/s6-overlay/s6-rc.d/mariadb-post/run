#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Post-start initialization of MariaDB service
# ==============================================================================

function execute_without_error_messages() {
    local current_log_level="${__BASHIO_LOG_LEVELS[${__BASHIO_LOG_LEVEL}]}"
    bashio::log.level off
    local exit_code=0
    $@ || exit_code=$?
    bashio::log.level ${current_log_level}
    return ${exit_code}
}

# Wait until DB is running
while ! mysql -e "" 2> /dev/null; do
    sleep 1
done
bashio::log.info "MariaDB started"

# Delete service information, just in case the previous instance somehow did not cleanup
execute_without_error_messages bashio::services.delete "mysql" || true

bashio::log.info "Check data integrity and fix corruptions"
mysqlcheck --no-defaults --databases mysql --fix-db-names --fix-table-names || true
mysqlcheck --no-defaults --databases mysql --check --check-upgrade --auto-repair || true
mysqlcheck --no-defaults --all-databases --skip-database=mysql --fix-db-names --fix-table-names || true
mysqlcheck --no-defaults --all-databases --skip-database=mysql --check --check-upgrade --auto-repair || true

bashio::log.info "Ensuring internal database upgrades are performed"
mysql_upgrade --silent

# Set default secure values after initial setup
bashio::log.info "Secure the installation"
mysql <<-EOSQL
    SET @@SESSION.SQL_LOG_BIN=0;
    DELETE FROM
        mysql.user
    WHERE
        user NOT IN ('mysql.sys', 'mariadb.sys', 'mysqlxsys', 'root', 'mysql', 'proxies_priv')
            OR host NOT IN ('localhost');
    DELETE FROM
        mysql.proxies_priv
    WHERE
        user NOT IN ('mysql.sys', 'mariadb.sys', 'mysqlxsys', 'root', 'mysql', 'proxies_priv')
            OR host NOT IN ('localhost');
    DROP DATABASE IF EXISTS test;
    FLUSH PRIVILEGES;
EOSQL

# Cleanup failed export - file structure before v2.5.2.5
if bashio::fs.file_exists "${OLD_MARIADB_DUMP_FINISHED}"; then
    if bashio::fs.file_exists "${OLD_MARIADB_DUMP/TYPE/schema}.tmp"; then
        rm -f ${OLD_MARIADB_DUMP/TYPE/schema}
        mv ${OLD_MARIADB_DUMP/TYPE/schema}.tmp ${OLD_MARIADB_DUMP/TYPE/schema}
    fi
    if bashio::fs.file_exists "${OLD_MARIADB_DUMP/TYPE/data1}.tmp"; then
        rm -f ${OLD_MARIADB_DUMP/TYPE/data1}
        mv ${OLD_MARIADB_DUMP/TYPE/data1}.tmp ${OLD_MARIADB_DUMP/TYPE/data1}
    fi
    if bashio::fs.file_exists "${OLD_MARIADB_DUMP/TYPE/data2}.tmp"; then
        rm -f ${OLD_MARIADB_DUMP/TYPE/data2}
        mv ${OLD_MARIADB_DUMP/TYPE/data2}.tmp ${OLD_MARIADB_DUMP/TYPE/data2}
    fi
    rm ${OLD_MARIADB_DUMP_FINISHED}
else
    rm -f ${OLD_MARIADB_DUMP/TYPE/schema}.tmp
    rm -f ${OLD_MARIADB_DUMP/TYPE/data1}.tmp
    rm -f ${OLD_MARIADB_DUMP/TYPE/data2}.tmp
fi

# Cleanup failed export
if bashio::fs.file_exists "${MARIADB_DUMP_FINISHED}"; then
    if bashio::fs.file_exists "${MARIADB_DUMP}.tmp"; then
        if bashio::fs.file_exists "${MARIADB_DUMP}"; then
            rm -f ${MARIADB_DUMP}.bak
            mv ${MARIADB_DUMP} ${MARIADB_DUMP}.bak
            fsync ${MARIADB_DUMP}.bak
        fi
        mv ${MARIADB_DUMP}.tmp ${MARIADB_DUMP}
        fsync ${MARIADB_DUMP}
    fi
    rm ${MARIADB_DUMP_FINISHED}
else
    rm -f ${MARIADB_DUMP}.tmp
    if bashio::fs.file_exists "${MARIADB_DUMP}.bak" \
        && ! bashio::fs.file_exists "${MARIADB_DUMP}";
    then
        # This is when even replacing last damaged dump with previous backup also failed below
        mv ${MARIADB_DUMP}.bak ${MARIADB_DUMP}
        fsync ${MARIADB_DUMP}
    fi
fi

# Import all databases schema and data... (no connection is allowed until it is finished)
if bashio::config.exists "retention.enabled"; then
    if bashio::config.true "retention.enabled"; then
        EXPORT_IMPORT_ALL_DATABASES_CONTENT=true
        printf "${EXPORT_IMPORT_ALL_DATABASES_CONTENT}" > /var/run/s6/container_environment/EXPORT_IMPORT_ALL_DATABASES_CONTENT
        if ! bashio::fs.file_exists "${OLD_MARIADB_DUMP/TYPE/schema}" \
            && ! bashio::fs.file_exists "${MARIADB_DUMP}"
        then
            bashio::log.warning "Importing last known all databases schema and data skipped, no dump file found"
        else
            if bashio::fs.file_exists "${OLD_MARIADB_DUMP/TYPE/schema}"; then
                # File structure before v2.5.2.5
                bashio::log.info "Last known exported homeassistant database schema and data timestamp is $(stat ${OLD_MARIADB_DUMP/TYPE/schema} -c %y)"
                bashio::log.info "Importing homeassistant database schema and data... (no connection is allowed until it is finished)"
                gzip -d ${OLD_MARIADB_DUMP/TYPE/schema} -c \
                    | mysql homeassistant
                gzip -d ${OLD_MARIADB_DUMP/TYPE/data1} -c \
                    | mysql homeassistant
                gzip -d ${OLD_MARIADB_DUMP/TYPE/data2} -c \
                    | mysql homeassistant
            else
                bashio::log.info "Last known exported all databases schema and data timestamp is $(stat ${MARIADB_DUMP} -c %y)"
                bashio::log.info "Importing all databases schema and data... (no connection is allowed until it is finished)"
                if ! gzip -d ${MARIADB_DUMP} -c \
                    | mysql
                then
                    if ! bashio::fs.file_exists "${MARIADB_DUMP}.bak"; then
                        bashio::log.error "Importing failed"
                        bashio::exit.nok
                    else
                        bashio::log.warning "Importing failed, dropping all current databases and reimporting from internal backup of previous export"
                        mysql -Nse "SHOW DATABASES" \
                            | { grep -Ev 'sys|mysql|information_schema|performance_schema' || true ;} \
                            | awk '{print "DROP DATABASE `" $1 "`;"}' \
                            | mysql
                        bashio::log.info "Previous (!) known exported all databases schema and data timestamp is $(stat ${MARIADB_DUMP}.bak -c %y)"
                        bashio::log.info "Importing all databases schema and data... (no connection is allowed until it is finished)"
                        if ! gzip -d ${MARIADB_DUMP}.bak -c \
                            | mysql
                        then
                            bashio::log.error "Importing failed"
                            bashio::exit.nok
                        fi
                        bashio::log.info "Replacing damaged last known exported all databases schema and data with internal backup of previous export"
                        rm -f ${MARIADB_DUMP}
                        mv ${MARIADB_DUMP}.bak ${MARIADB_DUMP}
                        fsync ${MARIADB_DUMP}
                    fi
                fi
            fi
            # Bugfix for v2.5.2.4 unnecessary schema version insertion
            if (( 1 == $(mysql -Nse "SELECT COUNT(1) FROM information_schema.tables WHERE table_schema = 'homeassistant' AND table_name = 'schema_changes';") )); then
                mysql homeassistant -e "DELETE FROM schema_changes WHERE change_id=1 AND schema_version=35;"
            fi
        fi
    else
        # File structure before v2.5.2.5
        if bashio::fs.file_exists "${OLD_MARIADB_DUMP/TYPE/schema}"; then
            rm -f ${OLD_MARIADB_DUMP/TYPE/schema}
            rm -f ${OLD_MARIADB_DUMP/TYPE/data1}
            rm -f ${OLD_MARIADB_DUMP/TYPE/data2}
            bashio::log.info "Data retention is explicitly turned off, unused exported homeassistant database schema and data is removed"
        fi
        if bashio::fs.file_exists "${MARIADB_DUMP}"; then
            rm -f ${MARIADB_DUMP}.bak
            rm -f ${MARIADB_DUMP}
            bashio::log.info "Data retention is explicitly turned off, unused exported all databases schema and data is removed"
        fi
    fi
fi

# Init databases
bashio::log.info "Ensure databases exist"
for database in $(bashio::config "databases"); do
    bashio::log.info "  Create database ${database}"
    mysql -e "CREATE DATABASE ${database};" 2> /dev/null || true
done

# Init logins
bashio::log.info "Ensure users exist and are updated"
for login in $(bashio::config "logins|keys"); do
    USERNAME=$(bashio::config "logins[${login}].username")
    PASSWORD=$(bashio::config "logins[${login}].password")

    if mysql -e "SET PASSWORD FOR '${USERNAME}'@'%' = PASSWORD('${PASSWORD}');" 2> /dev/null; then
        bashio::log.info "  Update user ${USERNAME}"
    else
        bashio::log.info "  Create user ${USERNAME}"
        mysql -e "CREATE USER '${USERNAME}'@'%' IDENTIFIED BY '${PASSWORD}';" 2> /dev/null || true
    fi
done

# Init rights
bashio::log.info "Init/Update rights"
for right in $(bashio::config "rights|keys"); do
    USERNAME=$(bashio::config "rights[${right}].username")
    DATABASE=$(bashio::config "rights[${right}].database")

    if bashio::config.exists "rights[${right}].privileges"; then
        PRIVILEGES=$(bashio::config "rights[${right}].privileges")
        bashio::log.info "  Granting ${PRIVILEGES} to ${USERNAME} on ${DATABASE}"
        mysql -e "REVOKE ALL PRIVILEGES ON ${DATABASE}.* FROM '${USERNAME}'@'%';" || true
        mysql -e "GRANT ${PRIVILEGES} ON ${DATABASE}.* TO '${USERNAME}'@'%';" || true
    else
        bashio::log.info "  Granting all privileges to ${USERNAME} on ${DATABASE}"
        mysql -e "GRANT ALL PRIVILEGES ON ${DATABASE}.* TO '${USERNAME}'@'%';" 2> /dev/null || true
    fi
done

# Generate service user
if ! bashio::fs.file_exists "/data/secret"; then
    pwgen 64 1 > /data/secret
fi
SECRET=$(</data/secret)
mysql -e "CREATE USER 'service'@'172.30.32.%' IDENTIFIED BY '${SECRET}';" 2> /dev/null || true
mysql -e "CREATE USER 'service'@'172.30.33.%' IDENTIFIED BY '${SECRET}';" 2> /dev/null || true
mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'service'@'172.30.32.%' WITH GRANT OPTION;" 2> /dev/null || true
mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'service'@'172.30.33.%' WITH GRANT OPTION;" 2> /dev/null || true

# Flush privileges
mysql -e "FLUSH PRIVILEGES;" 2> /dev/null || true

# Send service information to the Supervisor
PAYLOAD=$(\
    bashio::var.json \
        host "$(hostname)" \
        port "^3306" \
        username "service" \
        password "${SECRET}"
)
bashio::log.info "Sending service information to Home Assistant"
bashio::services.publish "mysql" "${PAYLOAD}"
